<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAADsBAAA7AQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi31gAIt9YACLfWABi31gAIt9YACLfWAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAi31gAIt9YACLfWAAi31gAYt9YACLfWAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi31gAot9YACLfWA0i31gj4t9YEiLfWAAi31gAot9
        YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLfWAAi31gAot9YACLfWBIi31gj4t9YDSLfWAAi31gAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLfWADi31gAIt9YDaLfWD/i31gzY+C
        YwCEgGAAi31gAIN1WgAAAAAAAAAAAAAAAAAAAAAAgnZaAIt9YACMdmIAkIBkAIt9YM2LfWD/i31gNot9
        YACLfWADAAAAAAAAAAAAAAAAAAAAAAAAAACfk3wAn5R8AJyReQGckHgBnJB4AZeLcQKcj3YBh3ZXAIt9
        YMqLfWD/jH5hMIp7XgCRhGgDnJB4AZyQeAGckHgBnJB4AZyQeAGckHgBkYRoA4p7XgCMfmEwi31g/4t9
        YMqGdVYAm492AZeLcQKckHgBnJB4AZyReQGflHwAn5R8ALatmwCzqZcBurGgALqxnwC+taUAi31gAIp8
        XwSKfF8Ainxfeop8X/+KfF97inxfAIp8XwSEd1sAAAAAAAAAAAAAAAAAAAAAAIR3WwCKfF8EinxfAIp8
        X3uKfF//inxfeop8XwCKfF8Ei31gAL21pQC5sZ8AurGgALOplwG2rZsA////AOXj3ACNf2QOkIRqEpCD
        aRGQg2kRjoFnFKaZgAeEd109gXRa/4F0Ws6ThmwOkINpEpCDaRKQg2kRkINpEZCDaRGQg2kRkINpEpCD
        aRKThmwOgXRazoF0Wv+Ed109ppmAB46BZxSQg2kRkINpEZCDahKNf2QO4tzXAP///wCpnokAqp+KVaWZ
        g/ujmIHro5iC7aOYge6jmIHuo5iB7qOYgu2hln/9oZV+/aOYge+jmILto5iB7qOYge6jmIHuo5iB7qOY
        ge6jmIHuo5iC7aOYge+hlX79oZZ//aOYgu2jmIHuo5iB7qOYge6jmILto5iB66WZg/uqn4pVqZ6JALSr
        mACzqpdUurKh/7y1pf68tKT/vLSk/7y0pP+8tKT/vLSk/721pf+9taX+vLSk/7y0pP+8tKT/vLSk/7y0
        pP+8tKT/vLSk/7y0pP+8tKT/vLSk/721pv69taX/vLSk/7y0pP+8tKT/vLSk/7y0pP+8taX+urKh/7Oq
        l1S0q5gA39/fBN/f3wDg4N+F4ODf/+Dg3/rj4+T+4+Pk/uPj5P7j4+T+4uPj/+Lj4//j5OT+4+Pk/uPj
        5P7j4+T+4ODf/uDg3/7f397+397d/t/e3v7f3t3+397e/+Df3//g4N/+4ODf/uDg3/7g4N/+4ODf+uDg
        3//g4N+F39/fAN/f3wTi4uME5OXmAODg4IDg4OH/39/f+9TSzv/V0sz/09HM/9LQzf/U0sz/1NLM/9LQ
        zf/T0cz/1dLM/9TSzv/f39//4ODg/+Pj5P/m5+n/5ubo/+bn6f/j4+T/4ODg/+Dg4P/g4OD/4ODg/+Dg
        4P/g4OD74ODg/+Dg4IDk5eYA4uLjBODg4ATg4OAA39/fgeDh4f/e3dv7sq6o/6elpf+vq6X/tK+j/6mn
        pf+pp6X/tK+j/6+rpf+npaX/sq6o/93c2v/k5OX/ycbA/6+qnf+0r6T/r6qd/8nGwP/i4uP/3t7d/9/e
        3v/f3t7/39/e/+Dg4Pvg4OD/4ODggeDg4ADg4OAE4ODgBeDg4ADg4OCA3t7g/+vo3/ufs/L/PW7//6G2
        8//n5+j/WIL+/1iC/v/n5+j/obbz/z1u//+fs/L/6+jf/97f4f/c29r/19bT/9jX1f/W1dP/3t7e/+fo
        6f/l5uf/5ubo/+bm6P/l5uf/4ODh++Dg4P/g4OCA4ODgAODg4AXg4OAF4ODgAODg4IDe3uH/7Oje+5Ko
        7v8oXP//lart/+Dg3v9Ecf3/RHH9/+Dg3v+Uqu3/J1v//5Ko7v/r593/4OLl/8vJw/+zrqL/t7Kn/7ay
        p/+0r6T/sq2h/7Otov+zrqL/sqyh/7axpv/d3Nz74eHh/+Dg34Dg4OAA4ODgBeDg4AXg4OAA4ODggN7e
        4P/s6N77k6nv/yld//+Wq+7/4uHg/0l0/v9JdP7/4uHg/5es7v8sYP//lKrv/+vo3v/e3+H/29va/9bV
        0v/X1tT/19bT/9fW1P/X1tT/19bU/9fW1P/X1tT/2NfV/9/f3/vg4OD/4ODggODg4ADg4OAF4ODgBeDg
        4ADg4OCA3t7g/+vo3vuZru7/OGj//5yv7f/h4eD/SXT+/0h0/v/i4eD/l6zu/ytf//+Uqu//6+fd/+Di
        5f/LycP/s66i/7eyqP+2saf/trGn/7axp/+2saf/trGn/7Wwpv+5tKv/3d3c++Hh4f/g4N+A4ODgAODg
        4AXg4OAF4ODgAODg4IDg4OD/4eHg+9vc4f/T1+P/3t7g/9fZ4v9Ldv3/SXT+/+Lh4P+XrO7/K1///5Sq
        7//r6N7/3t/h/9vb2v/W1dL/19bU/9fW0//X1tP/19bT/9fW0//X1tP/19bT/9fW1P/f39/74ODg/+Dg
        4IDg4OAA4ODgBeDg4AXg4OAA4ODggODg4P/g4OD74eHg/+Li4P/k49//1tni/0h0/f9Gcv7/4eHg/5es
        7v8rX///lKrv/+vn3f/h4uX/ysjE/7SvpP+4s6n/trKp/7ezqP+3s6j/t7Oo/7izqf+3sqf/uras/93d
        3Pvh4eH/4ODfgODg4ADg4OAF4ODgBeDg4ADg4OCA4ODg/+Dg4Pvg4OD/39/g/+Li4P/X2eL/VX37/1J7
        /P/i4uD/l6zu/ytf//+Uqu//6+jd/97f4v/f3NX/0c7K/9LQzP/Z1cr/0M/M/9HPzP/Rz8z/0M/M/9HP
        y//S0c3/39/f++Dg4P/g4OCA4ODgAODg4AXg4OAF4ODgAODg4IDg4OD/4ODg++Dg4P/g4OD/4ODg/9/g
        4P/W2eL/09fj/+vo3v+Vqu//LWD//5Sq7//r6N7/4uHf/7TC6//g4ub/4eLl/8LM6//p6OT/4eLl/+Pk
        5f/q6eP/4+Pl/+Pk5P/g4OD74ODg/+Dg4IDg4OAA4ODgBeDg4AXg4OAA4ODggODg4P/g4OD739/e/9/f
        3v/f397/39/e/+Pi3//g4OD/7Oje/5Op7/8pXf//k6nv/+rn3v/k49//ucTn/4Cc8v+Yre3/hJ7x/7K/
        6P/w69z/4ODf/8LK5f/k497/3t7g/+Dg4Pvg4OD/4ODggODg4ADg4OAF4ODgBeDg4ADg4OCA4ODg/+Dg
        4Pvl5ef/5ebn/+Xm5//l5ef/4ODh/93e4P/r6N7/ma7u/zho//+Zru7/6+je/93e4f/m5N//wMnm/9rb
        4f/q597/jKTx/7fC6P+csO3/eZf0/7vG5//q597/39/g++Dg4P/g4OCA4ODgAODg4AXg4OAF4ODgAODg
        34Dh4eH/3d3c+7q2rP+3sqj/t7Ko/7q2rP/d3dz/4eHh/+Hg4P/b3OH/1Nfi/9vc4f/h4eD/4ODg/9/f
        4P/n5d//4eDg/+Li4P/a3OH/hJ/y/8PL5v/l5N//i6Px/9LW4//h4OD74ODg/+Dg4IDg4OAA4ODgBeDg
        4AXg4OAA4ODfgODg4P/e3t37xcK7/8O/uP/Dv7j/xcK7/97e3f/g4OH/4ODg/+Hh4P/j4t//4eHg/+Dg
        4P/g4OD/4ODg/9/f4P/g4OD/39/g/+Hh4P/p5t7/4+Lf/+jm3v+5xOf/UXr8/8jP5Pvl5N//3d7ggODg
        4ADg4OAF5OXmBOXm5wDf3t2C4eHh/93d3Pu6tqz/t7Kn/7eyp/+6tqz/3d3c/+Hh4f/g4N//4ODg/9/f
        4P/g4OD/4ODg/+Dg4P/g4OD/4ODg/+Dg4P/g4OD/4ODg/97f4P/e3+D/4uHf/9DV4/+dsO3/19nh++Lh
        3//e3t6C5ebnAOTl5gTh4eMF4eHjAOHh44Dh4eL/4eLj++bn6f/m5+r/5ufq/+bn6f/h4uP/4eHi/+Hh
        4//h4eP/4eHj/+Hh4//h4eP/4eHj/+Hh4//h4eP/4eHj/+Hh4//h4eP/4eHj/+Hh4//g4eP/5OPi/+zq
        4P/i4uL74OHj/+Hh44Dh4eMA4eHjBX9sRACId1MPq6OSubOsn/+yq574saqc+7GqnPuxqpz7saqc+7Kr
        nvuyq577sque+7Krnvuyq577sque+7Gqnf+xqp3/sque+7Krnvuyq577sque+7Krnvuyq577sque+7Kr
        nvuxq577sKmf+7KrnvizrJ//q6OSuYl3Uw9/bEQAr6WSAK+lkW+upI//raKN+62ijf+too3/raKN/62i
        jf+too3/raKN/62ijf+too3/raKN/62ijf+too7/r6WR/6+lkf+too7/raKN/62ijf+too3/raKN/62i
        jf+too3/raKN/62ijf+too3/raKN/62ijfuupI//r6WRb6+lkgDAuKkAv7enGMO8rnvEva+AxL2vf8S9
        r3/Eva9/xL2vf8S9r3/Eva9/xL2vf8S9r3/Eva+Axb6wfcG5q4epnon3qZ6J98G5q4fFvrB9xL2vgMS9
        r3/Eva9/xL2vf8S9r3/Eva9/xL2vf8S9r3/Eva9/xL2vgMO8rnu/t6cYwLipAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAId5WwGHeVsAh3lbEId5W/KHeVvyh3lbEId5
        WwCHeVsBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvLOjALqy
        oQG+tqcEv7enBL+3pwS/t6cEv7enBL+3pwS/t6cEv7enBL+3pwS/t6cEubGgBcS9rwTh3tYDjH5iw4x+
        YsPl490CxLyuBLmxoAW/t6cEv7enBL+3pwS/t6cEv7enBL+3pwS/t6cEv7enBL+3pwS+tqcEurKhAbyz
        owAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi31gAIt9
        YACLfWAHi31gBot9YACLfWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIt9
        YACLfWAAi31gAYt9YAGLfWABi31gAYt9YACLfWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/pfpf/on5F/6J+RfgRAIgZETyIlAAAACgAAAAYAAAAFAAAACQAAAAkAA
        AAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAoAA
        AAGAAAABgAAAAf/0L/+AAAAB//pf///0L/8=
</value>
  </data>
</root>